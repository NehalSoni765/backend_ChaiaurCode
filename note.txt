-> structure
index -> db logic,
app -> config,cookie,
constant -> enums,db-enums
folder = db,models(schema),controller,routes,middleware,utils

deploy in production
computer =><= server : sending request to server and set response from server to network using express

fullstack connect frontend-backend
{
    - backend resolve cors issue import cors : app.use(cors()) or whitelisting cors({origin:"frontend"})
    - frontend vite.config.js add server{proxy:{"/api":"backend"}}
    - create build from frontend and put dist into backend
      open server.js file and app.use(express.static("dist"))//build name in our case dist
    - build not work in other cases like updating frontend and backend not propogating
}

taking backend to next level
{- oveview to project, sample youtube (frontend+backend)}

data modeling (app:datesen[paid], eraser())
{
    - moon modelor means field of data
    - mongoose help in data modeling 
    online editor (codesandbox, github codespaces,stackbitz)
    {
      import mongoose from "mongoose";
      const userSchema = new mongoose.Schema({})
      export const User = mongoose.model("User",userSchema); //"User" convert into users mongodb(small+plural)
    }
}
ecommerce and hospital schema{
    > todos{
      user : name,email,password
      todo : content,complete,createdBy(user),subTodos([subTodo])
      subTodo: title,complete,createdBy(user)
    }
    > ecommerce{
      user : name,email,pass
      category : name,
      product : name,description,image,price,stock,owner(user),category(category)
      order : orderPrice,address,orderItem([{productId(product),qnt}]),customer(user),status(enum[pending,deliver,cancel])
    } 
    > hospitals{
      patient : name,age,bloodgroup,gender,address,diagnosedWith,admittedIn(hospital)
      doctor : name,qualification,salary,experiance,workInHospitals([hospitalId(hospital)]),workHoursInHospital([{hospitalId(hospital),hours}])
      hospitals : name,addressline1,addressline2,city,pincode,specializedIn([""])
    }
}
now start
setup professional backend {
  - folder : controllers,db,middlewares,routes,models,utils
  - file : index,constants,app
  - nodemon install package.json (dev:nodemon src/index.js)
}
connect database in mern debugging {
  (db in always another continator)
  - mongodb atlas (login with nehalsoni.it>network access,database access,database(development))
  - databse > connect button > campus > copy connection url "mongodb+srv://nehalsoniit:<password>@cluster0.cyj5jgl.mongodb.net/"
  - remove last slash from url and update passowrd
  - import file name should be "./constants.js"
  - 1) wrap mongodb into (async()=>try catch )()and async await
  - 2) open db folder>index.js = try-catch fucntion connectdb(){await moongose.connect("url"+/"dbname")} catch(err)=>process.exit(1) and put into main index.js
  process.exit(1) immidiate exit even async-await, ()() immidiate invoke function
}
custom api response and error handline{
  - first connect db then connect port
  - app export as name
  - app used int cors({origin}),cookieParser(),express.json({limit}),express.urlencoded({extended}),express.static("dist")
  - example /instagram ->[user login(middleware)]->[(middleware)]=>get response and return res to this url
  - asyncHandler(utils)
  - ApiError(utils) override : class ApiError extended Error 
}
9] user-video model and jwt token{
  - user : username,email,password,fullName,avatar,coverImage,watchHostory(video),refToken
  - video : videoFile,title,description,duration,views,isPublished,thumbnail,owner
    aggregation query on video : npm i mongoose-aggregate-paginate-v2
    passowrd bcrypt npm i bcrypt
    webtoken : npm i jsonwebtoken : bearer token
    encrypt password before store intodb that use userSchema.pre()
    validating passowrd userSchema.methods.isPasswordCorrect(async(pass)=>return await bcrypt.compare(pass,this.pass))
    acceess_Token_Expiry < refresh_Token_Expiry in env file
}
10] upload file{
  - cloudinary.com for upload image into third party : npm i cloudinary
  - multer/express-fileupload : upload
  - fs is file system given by nodejs 
  steps: {
    > take file from user and store temp into local
    > take file from local and store into cloudinary 
  }
  uploadOnCloudinary(util cloudinary) : take localpath and just copy uploadCode from cloudinary and paste async-await with try-catch and catch fs.unlinkSync(localpath) return null
  middleware {
    multer.middleware.js(https://www.npmjs.com/package/multer) 
    multer.diskstorage({destination:(req,file,cb)=>cb(null,"./public,temp), fileName:(req,res,cb)=>cb(null,file.originalname)})
  }
}
11] http creash course {
  - http : hyper text transfer protocol
  - http/https = send same string/encrypt string
  - URL : Unifirm resource locator
  - URI : uniform resource 
  - URN : uniform resource
  - meta data = headers are in key-pair values 
  - most common {
    > accept : application/json
    > user-agent : operating system (postman,browse) check request comes from
    > Authorization : 
    > COntent-type
    > cookie
    > cache-control
  }
  cors : access-control-allow-[origin/credantial/method]
  security : access-control-allow-[origin/credantial/method]
}
12] router and controller {
    - user.controller.js const reg = asyncHandler((req,res)=>res.status(200).json({message:"ok"}))
    - router : const router = Router(); router.get("/register,ref());
    - app : import userRouter from "./router/user.routes.js";app.use("/user",userRouter)
}
13] Logic building {
    - steps {
        get user from frontend
        validation
        user exist
        check for avatar then upload into cloudinary
        create user object - create entry in db,
        remove passowrd and refToken from response
        check user created 
        return response
    }
}
14] use postman for backend{
    - register controller check by postman
    - resolve error putting :  nodemon -r dotenv/config erc/index.js
}
15] {
  - access token : short period token
  - refresh token : long period token
  - refresh token : user authenticated then check your token and db token same just give new token
  login {
    get user from req,
    validate User
    check exist user
    check password exist using isPasswordCorrect method
    generate access and refresh token
    set cookie options
    send response
  }
  logout{
    middleware{
      get token from cookies(access) or headers.authorization
      decode token using jwt verify 
      get user by decodeToken?._id
      check user
      append user into req and next
    }
    upadteByIdAndUpdate where set refToken undefined
    create options for cookie
    send response with clear Cookie
  }
}
16] access and refresh token{
  - session storage(access) : short term expiry
  - refresh : long term expiry
  - In db store refresh token only
  - process {
    > at login time passing user,access,refresh
    > session expired just hit api of new session storage
    > user hit api check user cookie refresh and match with db
    > pass new refresh token to user and store into db 
  }
  refreshAccessToken{
    > take token from cookies.refreshToken || body.refreshToken
    > decodedToken using jwt verify 
    > get user from decodedToken id
    > check user.refreshToken incommingToken 
    > generate access and refresh token
    > set cookie options
    > send response with cookie access,refresh
  }
}
17] update controller for user{
  - change password
  - get current user
  - update account details
  - update avatar
  - update coverImage
}
18] suscriber schema{
  - subscriber : subscriber(a,b,c,d,e,f),channel(cac,hc,fcc)
  - channel subscriber find : match channel(ch:cac,sb:a)(ch:hc,sb:c)(ch:cac,sb:c)(ch:fcc,sb:c) schema where filter our channel and count it
  - channel : help of subscriber count [getname(cac)>ref channel]=getcount of subscribers
  - subscriber : help of channel count [getname(c)>ref sb]=get count of user subscribed channel
}
19] mongodb aggregation pipelines{
  - mongodb users(),authors(_id,name,doc),books(_id,author_id,name)
  - database > books> aggregation 
  - each stage have pipelines and result based on sequence pipelines
  - [{
      $lookup(join):{
        from:"authors", other schema
        localField:"author_id". book table column
        foreignField:"_id" author table column
        as : "author_details" table name (append into books form in [])
      }
    },
    {
      $addfields:{
        author_details:{
          $first : "author_details" //take first object from author_details
          $arrayElemAt : ["author_details",0]
        }
      }
    }
  ]
  mongodb aggregation process {
  - find username
  - lookup with ref channel => output subscriber
  - lookup with ref subscriber => output subscribedTo
  - addFields with subscriberCount={$size:"$subscribers"},subscribedToCount={$size:"$subscribedTo"},
    isSubscribed:{$cond:{$if{$in:[userId,"$subscribers.subscriber"]} ,then:true,else:false}}
  }
}
20] sub piplines and routes{
  - watch history
}